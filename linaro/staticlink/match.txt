/media/frank/jam/linaro/aosp-M/hardware/intel/common/wrs_omxil_core/base/src/Android.mk 
 LOCAL_MODULE := libwrs_omxil_base

LOCAL_CPPFLAGS :=

LOCAL_LDFLAGS :=

LOCAL_CFLAGS += -Werror
ifeq ($(strip $(COMPONENT_SUPPORT_BUFFER_SHARING)), true)
LOCAL_CFLAGS += -DCOMPONENT_SUPPORT_BUFFER_SHARING
endif
ifeq ($(strip $(COMPONENT_SUPPORT_OPENCORE)), true)
LOCAL_CFLAGS += -DCOMPONENT_SUPPORT_OPENCORE
endif

LOCAL_C_INCLUDES := \
	$(WRS_OMXIL_CORE_ROOT)/utils/inc \
	$(WRS_OMXIL_CORE_ROOT)/base/inc \
	$(WRS_OMXIL_CORE_ROOT)/core/inc/khronos/openmax/include \
        $(call include-path-for, frameworks-native)/media/hardware \
        $(TOP)/frameworks/native/include/media/openmax

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/intel/common/wrs_omxil_core/base/src/ebuild.mk 
 LOCAL_MODULE := libwrs_omxil_base

LOCAL_CPPFLAGS :=

LOCAL_LDFLAGS :=

LOCAL_C_INCLUDES := \
	$(WRS_OMXIL_CORE_ROOT)/utils/inc \
	$(WRS_OMXIL_CORE_ROOT)/base/inc \
	$(WRS_OMXIL_CORE_ROOT)/core/inc/khronos/openmax/include

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/intel/common/wrs_omxil_core/utils/src/Android.mk 
 LOCAL_MODULE := libwrs_omxil_utils

LOCAL_CFLAGS :=

LOCAL_CPPFLAGS :=

LOCAL_LDFLAGS :=

LOCAL_SHARED_LIBRARIES :=

LOCAL_C_INCLUDES := \
	$(WRS_OMXIL_CORE_ROOT)/utils/inc
LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/intel/common/wrs_omxil_core/utils/src/ebuild.mk 
 LOCAL_MODULE := libwrs_omxil_utils

LOCAL_CFLAGS :=

LOCAL_CPPFLAGS :=

LOCAL_LDFLAGS :=

LOCAL_SHARED_LIBRARIES :=

LOCAL_C_INCLUDES := \
	$(WRS_OMXIL_CORE_ROOT)/utils/inc

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/intel/common/omx-components/videocodec/libvpx_internal/libvpx/test/android/Android.mk 
 LOCAL_MODULE := gtest
LOCAL_C_INCLUDES := $(LOCAL_PATH)/third_party/googletest/src/
LOCAL_C_INCLUDES += $(LOCAL_PATH)/third_party/googletest/src/include/
LOCAL_SRC_FILES := ./third_party/googletest/src/src/gtest-all.cc
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/intel/common/omx-components/videocodec/libvpx_internal/libwebm.mk 
 LOCAL_MODULE := libwebm

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/qcom/wlan/qcwcn/wifi_hal/Android.mk 
 LOCAL_MODULE := libwifi-hal-qcom
LOCAL_SHARED_LIBRARIES += libnetutils liblog

ifneq ($(wildcard external/libnl),)
LOCAL_SHARED_LIBRARIES += libnl
LOCAL_C_INCLUDES += external/libnl/include
else
LOCAL_SHARED_LIBRARIES += libnl_2
LOCAL_C_INCLUDES += external/libnl-headers
endif

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/qcom/wlan/qcwcn/wpa_supplicant_8_lib/Android.mk 
 LOCAL_MODULE := lib_driver_cmd_qcwcn
LOCAL_SHARED_LIBRARIES := libc libcutils
LOCAL_CFLAGS := $(L_CFLAGS)
LOCAL_SRC_FILES := $(WPA_SRC_FILE)
LOCAL_C_INCLUDES := $(WPA_SUPPL_DIR_INCLUDE)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/libhardware/tests/hwc/Android.mk 
 LOCAL_MODULE := libcnativewindow 
LOCAL_SRC_FILES := cnativewindow.c util.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/libhardware/tests/hardware/Android.mk 
 LOCAL_MODULE := static-hal-check
LOCAL_SRC_FILES := struct-size.cpp struct-offset.cpp struct-last.cpp
LOCAL_SHARED_LIBRARIES := libhardware
LOCAL_CFLAGS := -std=gnu++11 -O0

LOCAL_C_INCLUDES += \
    system/media/camera/include

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/broadcom/wlan/bcmdhd/wifi_hal/Android.mk 
 LOCAL_MODULE := libwifi-hal-bcm

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/hardware/broadcom/wlan/bcmdhd/wpa_supplicant_8_lib/Android.mk 
 LOCAL_MODULE := lib_driver_cmd_bcmdhd
LOCAL_SHARED_LIBRARIES := libc libcutils
LOCAL_CFLAGS := $(L_CFLAGS)
LOCAL_SRC_FILES := $(WPA_SRC_FILE)
LOCAL_C_INCLUDES := $(WPA_SUPPL_DIR_INCLUDE)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/topological-sort/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := \
    foo.c \
    foo2.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/topological-sort/jni/Android.mk 
 LOCAL_MODULE := bar
LOCAL_SRC_FILES := bar.c
LOCAL_STATIC_LIBRARIES := foo
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/prebuilt-copy/jni/Android.mk 
 LOCAL_MODULE := libbar
LOCAL_SRC_FILES := $(PREBUILTS_DIR)/obj/local/*$(TARGET_ARCH_ABI)/libbar.a
include $(PREBUILT__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/prebuilt-copy/prebuilts/jni/Android.mk 
 LOCAL_MODULE := libbar
LOCAL_SRC_FILES := bar.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/thin-archives/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := foo.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/thin-archives/jni/Android.mk 
 LOCAL_MODULE := bar
LOCAL_THIN_ARCHIVE := false
LOCAL_SRC_FILES := bar.c
LOCAL_STATIC_LIBRARIES := foo
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/multi-module-path/path1/foo/Android.mk 
 LOCAL_MODULE := libfoo
LOCAL_SRC_FILES := libfoo.c
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/multi-module-path/path2/bar/Android.mk 
 LOCAL_MODULE := libbar
LOCAL_SRC_FILES := libbar.c
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
LOCAL_STATIC_LIBRARIES := libfoo
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/warn-bad-modules/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := foo.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/warn-no-ldflags-in-static-libraries/jni/Android.mk 
 LOCAL_MODULE := libfoo
LOCAL_SRC_FILES := foo.c

# LOCAL_LDFLAGS are always ignored for static libraries.
# This should generate a warning when ndk-build is run!
LOCAL_LDFLAGS := -llog

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/warn-no-ldlibs-in-static-libraries/jni/Android.mk 
 LOCAL_MODULE := libfoo
LOCAL_SRC_FILES := foo.c

# LOCAL_LDLIBS are always ignored for static libraries.
# This should generate a warning when ndk-build is run!
LOCAL_LDLIBS := -llog

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/import-static/bar/Android.mk 
 LOCAL_MODULE := libbar
LOCAL_SRC_FILES := bar.c
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/import-static/foo/Android.mk 
 LOCAL_MODULE := libfoo
LOCAL_SRC_FILES := foo.c
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
LOCAL_STATIC_LIBRARIES := libbar
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/build/no-installable-modules/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := foo.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/whole-static-libs/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := foo.c foo2.c
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test0_foo
LOCAL_SRC_FILES := test0_foo.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test1_foo
LOCAL_SRC_FILES := test1_foo.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test2_foo
LOCAL_SRC_FILES := test2_foo.cpp
# This is required to rely on dynamic loader to resolve foo defined in exec
LOCAL_ALLOW_UNDEFINED_SYMBOLS := true
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test3_bar
LOCAL_SRC_FILES := test3_bar.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test3_foo
LOCAL_SRC_FILES := test3_foo.cpp
LOCAL_STATIC_LIBRARIES := test3_bar
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test4_bar
LOCAL_SRC_FILES := test4_bar.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/tests/device/test-gnustl_static-exception/jni/Android.mk 
 LOCAL_MODULE := test4_foo
LOCAL_SRC_FILES := test4_foo.cpp
LOCAL_STATIC_LIBRARIES := test4_bar
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/android/crazy_linker/Android.mk 
 LOCAL_MODULE := crazy_linker
LOCAL_C_INCLUDES = $(LOCAL_PATH)/include $(LOCAL_PATH)/src
LOCAL_CFLAGS := -Os -fvisibility=hidden -Wall -Werror
LOCAL_SRC_FILES := $(crazy_linker_sources)
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_EXPORT_LDLIBS := -llog
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/android/support/Android.mk 
 LOCAL_MODULE := android_support
LOCAL_SRC_FILES := $(android_support_sources)
LOCAL_C_INCLUDES := $(android_support_c_includes)
LOCAL_CFLAGS += -Drestrict=__restrict__ -ffunction-sections -fdata-sections -fvisibility=hidden
LOCAL_CPPFLAGS += -fvisibility-inlines-hidden

# These Clang warnings are triggered by the Musl sources. The code is fine,
# but we don't want to modify it. TODO(digit): This is potentially dangerous,
# see if there is a way to build the Musl sources in a separate static library
# and have the main one depend on it, or include its object files.
ifneq ($(TARGET_TOOLCHAIN),$(subst clang,,$(TARGET_TOOLCHAIN)))
LOCAL_CFLAGS += \
  -Wno-shift-op-parentheses \
  -Wno-string-plus-int \
  -Wno-dangling-else \
  -Wno-bitwise-op-parentheses
endif

LOCAL_CFLAGS += $(android_support_cflags)
LOCAL_EXPORT_CFLAGS := $(android_support_cflags)
LOCAL_EXPORT_C_INCLUDES := $(android_support_c_includes)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/android/support/tests/Android.mk 
 LOCAL_MODULE := minitest
LOCAL_SRC_FILES := minitest/minitest.cc
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/android/cpufeatures/Android.mk 
 LOCAL_MODULE := cpufeatures
LOCAL_SRC_FILES := cpu-features.c
LOCAL_SDK_VERSION := 9
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/android/cpufeatures/Android.mk 
 LOCAL_MODULE := cpufeatures
LOCAL_SRC_FILES := cpu-features.c
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
LOCAL_EXPORT_LDLIBS := -ldl
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/third_party/googletest/Android.mk 
 LOCAL_MODULE := googletest_static
LOCAL_SRC_FILES := $(googletest_sources)
LOCAL_C_INCLUDES := $(googletest_includes)
LOCAL_EXPORT_C_INCLUDES := $(googletest_includes)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/third_party/googletest/Android.mk 
 LOCAL_MODULE := googletest_main
LOCAL_SRC_FILES := $(googletest_main_sources)
LOCAL_STATIC_LIBRARIES := googletest_static
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/third_party/googletest/Android.mk 
 LOCAL_MODULE := googletest_main_shared
LOCAL_SRC_FILES := $(googletest_main_sources)
LOCAL_SHARED_LIBRARIES := googletest_shared
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/cxx-stl/llvm-libc++/Android.mk 
 LOCAL_MODULE := c++_static
LOCAL_SRC_FILES := $(llvm_libc++_sources)
LOCAL_C_INCLUDES := $(android_support_c_includes) $(llvm_libc++_includes)
LOCAL_CFLAGS := $(llvm_libc++_cflags)
LOCAL_CPPFLAGS := $(llvm_libc++_cxxflags)
LOCAL_CPP_FEATURES := rtti exceptions
LOCAL_EXPORT_C_INCLUDES := $(llvm_libc++_export_includes)
LOCAL_EXPORT_CPPFLAGS := $(llvm_libc++_export_cxxflags)
LOCAL_STATIC_LIBRARIES := android_support
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/cxx-stl/gnu-libstdc++/Android.mk 
 LOCAL_MODULE := gnustl_static
LOCAL_SRC_FILES := $(TOOLCHAIN_VERSION)/libs/$(TARGET_ARCH_ABI)/libgnustl_static$(TARGET_LIB_EXTENSION)
# For armeabi*, choose thumb mode unless LOCAL_ARM_MODE := arm
ifneq (,$(filter armeabi%,$(TARGET_ARCH_ABI)))
ifneq (arm,$(LOCAL_ARM_MODE))
LOCAL_SRC_FILES:= $(TOOLCHAIN_VERSION)/libs/$(TARGET_ARCH_ABI)/thumb/libgnustl_static$(TARGET_LIB_EXTENSION)
endif
endif
LOCAL_EXPORT_CPPFLAGS := $(gnustl_exported_cppflags)
LOCAL_EXPORT_C_INCLUDES := $(gnustl_exported_c_includes)
include $(PREBUILT__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/cxx-stl/stlport/Android.mk 
 LOCAL_MODULE := stlport_static
LOCAL_CPP_EXTENSION := .cpp .cc
LOCAL_SRC_FILES := $(libstlport_src_files)
LOCAL_SRC_FILES += $(libgabi++_src_files:%=../gabi++/%)
LOCAL_CFLAGS := $(libstlport_cflags)
LOCAL_CPPFLAGS := $(libstlport_cppflags)
LOCAL_C_INCLUDES := $(libstlport_c_includes)
LOCAL_EXPORT_C_INCLUDES := $(libstlport_c_includes)
LOCAL_CPP_FEATURES := rtti exceptions
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/ndk/sources/cxx-stl/system/Android.mk 
 LOCAL_MODULE := libstdc++
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_EXPORT_LDLIBS := -lstdc++

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/sdk/find_java/Android.mk 
 LOCAL_MODULE := libfindjava
LOCAL_SRC_FILES := find_java_lib.cpp utils.cpp

LOCAL_CFLAGS += -Wall -Wno-unused-parameter
LOCAL_CFLAGS += -D_XOPEN_SOURCE -D_GNU_SOURCE -DSH_HISTORY -DUSE_MINGW

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/development/ndk/samples/module-exports/jni/Android.mk 
 LOCAL_MODULE := foo
LOCAL_SRC_FILES := foo/foo.c
LOCAL_CFLAGS := -DFOO=2
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/foo
LOCAL_EXPORT_CFLAGS := -DFOO=1
LOCAL_EXPORT_LDLIBS := -llog
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/minui/Android.mk 
 LOCAL_MODULE := libminui

LOCAL_CLANG := true

# This used to compare against values in double-quotes (which are just
# ordinary characters in this context).  Strip double-quotes from the
# value so that either will work.

ifeq ($(subst ",,$(TARGET_RECOVERY_PIXEL_FORMAT)),ABGR_8888)
  LOCAL_CFLAGS += -DRECOVERY_ABGR
endif
ifeq ($(subst ",,$(TARGET_RECOVERY_PIXEL_FORMAT)),RGBX_8888)
  LOCAL_CFLAGS += -DRECOVERY_RGBX
endif
ifeq ($(subst ",,$(TARGET_RECOVERY_PIXEL_FORMAT)),BGRA_8888)
  LOCAL_CFLAGS += -DRECOVERY_BGRA
endif

ifneq ($(TARGET_RECOVERY_OVERSCAN_PERCENT),)
  LOCAL_CFLAGS += -DOVERSCAN_PERCENT=$(TARGET_RECOVERY_OVERSCAN_PERCENT)
else
  LOCAL_CFLAGS += -DOVERSCAN_PERCENT=0
endif

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/mtdutils/Android.mk 
 LOCAL_MODULE := libmtdutils

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/Android.mk 
 LOCAL_MODULE := libfusesideload

LOCAL_STATIC_LIBRARIES := libcutils libc libmincrypt
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/edify/Android.mk 
 LOCAL_MODULE := libedify

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/minzip/Android.mk 
 LOCAL_MODULE := libminzip

LOCAL_CFLAGS += -Wall

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bootable/recovery/minadbd/Android.mk 
 LOCAL_MODULE := libminadbd
LOCAL_CFLAGS := $(minadbd_cflags)
LOCAL_CONLY_FLAGS := -Wimplicit-function-declaration
LOCAL_C_INCLUDES := bootable/recovery system/core/adb
LOCAL_WHOLE_STATIC_LIBRARIES := libadbd
LOCAL_STATIC_LIBRARIES := libbase

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/tools/relocation_packer/Android.mk 
 LOCAL_MODULE := lib_relocation_packer

LOCAL_CPPFLAGS := $(common_cppflags)

LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/benchmarks/Android.mk 
 LOCAL_MODULE := libbenchmark
LOCAL_CFLAGS := $(benchmark_cflags)
LOCAL_CPPFLAGS := $(benchmark_cppflags)
LOCAL_SRC_FILES := $(benchmarklib_src_files)
LOCAL_C_INCLUDES := $(benchmark_c_includes)
LOCAL_STATIC_LIBRARIES := libbase
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/benchmarks/Android.mk 
 LOCAL_MODULE := libbenchmark
LOCAL_CFLAGS := $(benchmark_cflags)
LOCAL_CPPFLAGS := $(benchmark_cppflags)
LOCAL_SRC_FILES := $(benchmarklib_src_files)
LOCAL_C_INCLUDES := $(benchmark_c_includes)
LOCAL_MULTILIB := both
LOCAL_STATIC_LIBRARIES := libbase
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/tests/Android.mk 
 LOCAL_MODULE := bionic-compile-time-tests-g++
LOCAL_CPPFLAGS := -Wall
LOCAL_SRC_FILES := fortify_compilation_test.cpp
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/tests/Android.mk 
 LOCAL_MODULE := bionic-compile-time-tests-clang++
LOCAL_CPPFLAGS := -Wall
# FileCheck will error if there aren't any CLANG: lines in the file, but there
# don't appear to be any cases where clang _does_ emit warnings for sn?printf :(
LOCAL_SRC_FILES :=
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_stack_protector
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_tzcode
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_dns
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_freebsd
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_freebsd_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_netbsd
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_netbsd_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_openbsd_ndk
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_openbsd
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_openbsd_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_gdtoa
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_bionic
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_bionic_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_bionic_ndk
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_bionic_ndk_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_thread_atexit_impl
# TODO: Clang tries to use __tls_get_addr which is not supported yet
# remove after it is implemented.
LOCAL_CLANG := false
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_pthread
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_cxa
LOCAL_CLANG := true # GCC refuses to hide new/delete
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
# b/17574078: Need to disable coverage until we have a prebuilt libprofile_rt.
# Since this is a static library built with clang, it needs to link
# libprofile_rt when it is linked into the final binary. Since the final binary
# is built with GCC, it won't link libprofile_rt. We can't very easily just add
# libprofile_rt to all link lines the way we've done for libgcov because
# libprofile_rt isn't prebuilt, and it would be tricky to write a rule that
# would make sure libprofile_rt is built.
LOCAL_NATIVE_COVERAGE := false

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_syscalls
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_aeabi
LOCAL_CLANG := $(use_clang)
LOCAL_CFLAGS := $(libc_common_cflags) -fno-builtin
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_ndk
LOCAL_CLANG := $(use_clang)
LOCAL_ASFLAGS := $(LOCAL_CFLAGS)
LOCAL_CONLYFLAGS := $(libc_common_conlyflags)
LOCAL_CFLAGS := $(libc_common_cflags) -fvisibility=hidden -O0
LOCAL_CPPFLAGS := $(libc_common_cppflags)
LOCAL_C_INCLUDES := $(libc_common_c_includes)
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)
LOCAL_SYSTEM_SHARED_LIBRARIES :=

LOCAL_SRC_FILES := \
    $(libc_common_src_files) \
    $(libc_arch_dynamic_src_files) \
    $(libc_ndk_stub_src_files) \
    bionic/malloc_debug_common.cpp \

LOCAL_SRC_FILES_arm += \
    arch-common/bionic/crtbegin_so.c \
    arch-arm/bionic/atexit_legacy.c \
    arch-common/bionic/crtend_so.S \

LOCAL_CFLAGS := $(libc_common_cflags) \
    -DLIBC_STATIC \

LOCAL_WHOLE_STATIC_LIBRARIES := \
    libc_bionic_ndk \
    libc_cxa \
    libc_freebsd \
    libc_gdtoa \
    libc_malloc \
    libc_netbsd \
    libc_openbsd_ndk \
    libc_stack_protector \
    libc_syscalls \
    libc_tzcode \
    libm \

LOCAL_WHOLE_STATIC_LIBRARIES_arm := libc_aeabi
LOCAL_CXX_STL := none

ifneq ($(MALLOC_IMPL),dlmalloc)
LOCAL_WHOLE_STATIC_LIBRARIES += libjemalloc
endif

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_common_src_files))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_arch_dynamic_src_files))
$(eval $(call patch-up-arch-specific-flags,LOCAL_ASFLAGS,LOCAL_CFLAGS))

LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_common
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_WHOLE_STATIC_LIBRARIES := \
    libc_bionic \
    libc_bionic_ndk \
    libc_cxa \
    libc_dns \
    libc_freebsd \
    libc_gdtoa \
    libc_malloc \
    libc_netbsd \
    libc_openbsd \
    libc_openbsd_ndk \
    libc_pthread \
    libc_stack_protector \
    libc_syscalls \
    libc_thread_atexit_impl \
    libc_tzcode \

LOCAL_WHOLE_STATIC_LIBRARIES_arm := libc_aeabi

LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=

# TODO: split out the asflags.
LOCAL_ASFLAGS := $(LOCAL_CFLAGS)
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_common_src_files))
$(eval $(call patch-up-arch-specific-flags,LOCAL_ASFLAGS,LOCAL_CFLAGS))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_nomalloc
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_WHOLE_STATIC_LIBRARIES := libc_common
LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_arch_static_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc_malloc
LOCAL_CLANG := $(use_clang)
LOCAL_CXX_STL := none
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libc/Android.mk 
 LOCAL_MODULE := libc
LOCAL_CLANG := $(use_clang)
LOCAL_ADDITIONAL_DEPENDENCIES := $(libc_common_additional_dependencies)
LOCAL_WHOLE_STATIC_LIBRARIES := libc_common

ifneq ($(MALLOC_IMPL),dlmalloc)
LOCAL_WHOLE_STATIC_LIBRARIES += libjemalloc
endif

LOCAL_CXX_STL := none
LOCAL_SYSTEM_SHARED_LIBRARIES :=
LOCAL_ADDRESS_SANITIZER := false
LOCAL_NATIVE_COVERAGE := $(bionic_coverage)

$(eval $(call patch-up-arch-specific-flags,LOCAL_CFLAGS,libc_common_cflags))
$(eval $(call patch-up-arch-specific-flags,LOCAL_SRC_FILES,libc_arch_static_src_files))
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libm/Android.mk 
 LOCAL_MODULE := libm

LOCAL_SRC_FILES := \
    upstream-freebsd/lib/msun/bsdsrc/b_exp.c \
    upstream-freebsd/lib/msun/bsdsrc/b_log.c \
    upstream-freebsd/lib/msun/bsdsrc/b_tgamma.c \
    upstream-freebsd/lib/msun/src/catrig.c \
    upstream-freebsd/lib/msun/src/catrigf.c \
    upstream-freebsd/lib/msun/src/e_acosf.c \
    upstream-freebsd/lib/msun/src/e_acosh.c \
    upstream-freebsd/lib/msun/src/e_acoshf.c \
    upstream-freebsd/lib/msun/src/e_asinf.c \
    upstream-freebsd/lib/msun/src/e_atan2f.c \
    upstream-freebsd/lib/msun/src/e_atanh.c \
    upstream-freebsd/lib/msun/src/e_atanhf.c \
    upstream-freebsd/lib/msun/src/e_coshf.c \
    upstream-freebsd/lib/msun/src/e_expf.c \
    upstream-freebsd/lib/msun/src/e_fmod.c \
    upstream-freebsd/lib/msun/src/e_fmodf.c \
    upstream-freebsd/lib/msun/src/e_gamma.c \
    upstream-freebsd/lib/msun/src/e_gammaf.c \
    upstream-freebsd/lib/msun/src/e_gammaf_r.c \
    upstream-freebsd/lib/msun/src/e_gamma_r.c \
    upstream-freebsd/lib/msun/src/e_hypotf.c \
    upstream-freebsd/lib/msun/src/e_j0.c \
    upstream-freebsd/lib/msun/src/e_j0f.c \
    upstream-freebsd/lib/msun/src/e_j1.c \
    upstream-freebsd/lib/msun/src/e_j1f.c \
    upstream-freebsd/lib/msun/src/e_jn.c \
    upstream-freebsd/lib/msun/src/e_jnf.c \
    upstream-freebsd/lib/msun/src/e_lgamma.c \
    upstream-freebsd/lib/msun/src/e_lgammaf.c \
    upstream-freebsd/lib/msun/src/e_lgammaf_r.c \
    upstream-freebsd/lib/msun/src/e_lgamma_r.c \
    upstream-freebsd/lib/msun/src/e_log10f.c \
    upstream-freebsd/lib/msun/src/e_log2.c \
    upstream-freebsd/lib/msun/src/e_log2f.c \
    upstream-freebsd/lib/msun/src/e_logf.c \
    upstream-freebsd/lib/msun/src/e_powf.c \
    upstream-freebsd/lib/msun/src/e_remainder.c \
    upstream-freebsd/lib/msun/src/e_remainderf.c \
    upstream-freebsd/lib/msun/src/e_rem_pio2.c \
    upstream-freebsd/lib/msun/src/e_rem_pio2f.c \
    upstream-freebsd/lib/msun/src/e_scalb.c \
    upstream-freebsd/lib/msun/src/e_scalbf.c \
    upstream-freebsd/lib/msun/src/e_sinhf.c \
    upstream-freebsd/lib/msun/src/imprecise.c \
    upstream-freebsd/lib/msun/src/k_cos.c \
    upstream-freebsd/lib/msun/src/k_cosf.c \
    upstream-freebsd/lib/msun/src/k_exp.c \
    upstream-freebsd/lib/msun/src/k_expf.c \
    upstream-freebsd/lib/msun/src/k_rem_pio2.c \
    upstream-freebsd/lib/msun/src/k_sin.c \
    upstream-freebsd/lib/msun/src/k_sinf.c \
    upstream-freebsd/lib/msun/src/k_tan.c \
    upstream-freebsd/lib/msun/src/k_tanf.c \
    upstream-freebsd/lib/msun/src/s_asinh.c \
    upstream-freebsd/lib/msun/src/s_asinhf.c \
    upstream-freebsd/lib/msun/src/s_atanf.c \
    upstream-freebsd/lib/msun/src/s_carg.c \
    upstream-freebsd/lib/msun/src/s_cargf.c \
    upstream-freebsd/lib/msun/src/s_cargl.c \
    upstream-freebsd/lib/msun/src/s_cbrtf.c \
    upstream-freebsd/lib/msun/src/s_ccosh.c \
    upstream-freebsd/lib/msun/src/s_ccoshf.c \
    upstream-freebsd/lib/msun/src/s_cexp.c \
    upstream-freebsd/lib/msun/src/s_cexpf.c \
    upstream-freebsd/lib/msun/src/s_cimag.c \
    upstream-freebsd/lib/msun/src/s_cimagf.c \
    upstream-freebsd/lib/msun/src/s_cimagl.c \
    upstream-freebsd/lib/msun/src/s_conj.c \
    upstream-freebsd/lib/msun/src/s_conjf.c \
    upstream-freebsd/lib/msun/src/s_conjl.c \
    upstream-freebsd/lib/msun/src/s_copysign.c \
    upstream-freebsd/lib/msun/src/s_copysignf.c \
    upstream-freebsd/lib/msun/src/s_cosf.c \
    upstream-freebsd/lib/msun/src/s_cproj.c \
    upstream-freebsd/lib/msun/src/s_cprojf.c \
    upstream-freebsd/lib/msun/src/s_cprojl.c \
    upstream-freebsd/lib/msun/src/s_creal.c \
    upstream-freebsd/lib/msun/src/s_crealf.c \
    upstream-freebsd/lib/msun/src/s_creall.c \
    upstream-freebsd/lib/msun/src/s_csinh.c \
    upstream-freebsd/lib/msun/src/s_csinhf.c \
    upstream-freebsd/lib/msun/src/s_csqrt.c \
    upstream-freebsd/lib/msun/src/s_csqrtf.c \
    upstream-freebsd/lib/msun/src/s_csqrtl.c \
    upstream-freebsd/lib/msun/src/s_ctanh.c \
    upstream-freebsd/lib/msun/src/s_ctanhf.c \
    upstream-freebsd/lib/msun/src/s_erf.c \
    upstream-freebsd/lib/msun/src/s_erff.c \
    upstream-freebsd/lib/msun/src/s_exp2.c \
    upstream-freebsd/lib/msun/src/s_exp2f.c \
    upstream-freebsd/lib/msun/src/s_expm1f.c \
    upstream-freebsd/lib/msun/src/s_fabs.c \
    upstream-freebsd/lib/msun/src/s_fabsf.c \
    upstream-freebsd/lib/msun/src/s_fdim.c \
    upstream-freebsd/lib/msun/src/s_finite.c \
    upstream-freebsd/lib/msun/src/s_finitef.c \
    upstream-freebsd/lib/msun/src/s_fmax.c \
    upstream-freebsd/lib/msun/src/s_fmaxf.c \
    upstream-freebsd/lib/msun/src/s_fmin.c \
    upstream-freebsd/lib/msun/src/s_fminf.c \
    upstream-freebsd/lib/msun/src/s_frexp.c \
    upstream-freebsd/lib/msun/src/s_frexpf.c \
    upstream-freebsd/lib/msun/src/s_ilogb.c \
    upstream-freebsd/lib/msun/src/s_ilogbf.c \
    upstream-freebsd/lib/msun/src/s_llround.c \
    upstream-freebsd/lib/msun/src/s_llroundf.c \
    upstream-freebsd/lib/msun/src/s_log1pf.c \
    upstream-freebsd/lib/msun/src/s_logb.c \
    upstream-freebsd/lib/msun/src/s_logbf.c \
    upstream-freebsd/lib/msun/src/s_lround.c \
    upstream-freebsd/lib/msun/src/s_lroundf.c \
    upstream-freebsd/lib/msun/src/s_modf.c \
    upstream-freebsd/lib/msun/src/s_modff.c \
    upstream-freebsd/lib/msun/src/s_nan.c \
    upstream-freebsd/lib/msun/src/s_nearbyint.c \
    upstream-freebsd/lib/msun/src/s_nextafter.c \
    upstream-freebsd/lib/msun/src/s_nextafterf.c \
    upstream-freebsd/lib/msun/src/s_remquo.c \
    upstream-freebsd/lib/msun/src/s_remquof.c \
    upstream-freebsd/lib/msun/src/s_round.c \
    upstream-freebsd/lib/msun/src/s_roundf.c \
    upstream-freebsd/lib/msun/src/s_scalbln.c \
    upstream-freebsd/lib/msun/src/s_scalbn.c \
    upstream-freebsd/lib/msun/src/s_scalbnf.c \
    upstream-freebsd/lib/msun/src/s_signgam.c \
    upstream-freebsd/lib/msun/src/s_significand.c \
    upstream-freebsd/lib/msun/src/s_significandf.c \
    upstream-freebsd/lib/msun/src/s_sinf.c \
    upstream-freebsd/lib/msun/src/s_tanf.c \
    upstream-freebsd/lib/msun/src/s_tanhf.c \
    upstream-freebsd/lib/msun/src/s_tgammaf.c \
    upstream-freebsd/lib/msun/src/w_cabs.c \
    upstream-freebsd/lib/msun/src/w_cabsf.c \
    upstream-freebsd/lib/msun/src/w_cabsl.c \
    upstream-freebsd/lib/msun/src/w_drem.c \
    upstream-freebsd/lib/msun/src/w_dremf.c \

LOCAL_SRC_FILES_32 += \
    fake_long_double.c \

LOCAL_SRC_FILES_64 := \
    upstream-freebsd/lib/msun/src/e_acosl.c \
    upstream-freebsd/lib/msun/src/e_acoshl.c \
    upstream-freebsd/lib/msun/src/e_asinl.c \
    upstream-freebsd/lib/msun/src/e_atan2l.c \
    upstream-freebsd/lib/msun/src/e_atanhl.c \
    upstream-freebsd/lib/msun/src/e_fmodl.c \
    upstream-freebsd/lib/msun/src/e_hypotl.c \
    upstream-freebsd/lib/msun/src/e_lgammal.c \
    upstream-freebsd/lib/msun/src/e_remainderl.c \
    upstream-freebsd/lib/msun/src/e_sqrtl.c \
    upstream-freebsd/lib/msun/src/s_asinhl.c \
    upstream-freebsd/lib/msun/src/s_atanl.c \
    upstream-freebsd/lib/msun/src/s_cbrtl.c \
    upstream-freebsd/lib/msun/src/s_ceill.c \
    upstream-freebsd/lib/msun/src/s_copysignl.c \
    upstream-freebsd/lib/msun/src/e_coshl.c \
    upstream-freebsd/lib/msun/src/s_cosl.c \
    upstream-freebsd/lib/msun/src/s_fabsl.c \
    upstream-freebsd/lib/msun/src/s_floorl.c \
    upstream-freebsd/lib/msun/src/s_fmal.c \
    upstream-freebsd/lib/msun/src/s_fmaxl.c \
    upstream-freebsd/lib/msun/src/s_fminl.c \
    upstream-freebsd/lib/msun/src/s_modfl.c \
    upstream-freebsd/lib/msun/src/s_frexpl.c \
    upstream-freebsd/lib/msun/src/s_ilogbl.c \
    upstream-freebsd/lib/msun/src/s_llrintl.c \
    upstream-freebsd/lib/msun/src/s_llroundl.c \
    upstream-freebsd/lib/msun/src/s_logbl.c \
    upstream-freebsd/lib/msun/src/s_lrintl.c \
    upstream-freebsd/lib/msun/src/s_lroundl.c \
    upstream-freebsd/lib/msun/src/s_nextafterl.c \
    upstream-freebsd/lib/msun/src/s_nexttoward.c \
    upstream-freebsd/lib/msun/src/s_nexttowardf.c \
    upstream-freebsd/lib/msun/src/s_remquol.c \
    upstream-freebsd/lib/msun/src/s_rintl.c \
    upstream-freebsd/lib/msun/src/s_roundl.c \
    upstream-freebsd/lib/msun/src/s_scalbnl.c \
    upstream-freebsd/lib/msun/src/e_sinhl.c \
    upstream-freebsd/lib/msun/src/s_sinl.c \
    upstream-freebsd/lib/msun/src/s_tanhl.c \
    upstream-freebsd/lib/msun/src/s_tanl.c \
    upstream-freebsd/lib/msun/src/s_truncl.c \

LOCAL_SRC_FILES_64 += \
    upstream-freebsd/lib/msun/ld128/invtrig.c \
    upstream-freebsd/lib/msun/ld128/e_lgammal_r.c \
    upstream-freebsd/lib/msun/ld128/k_cosl.c \
    upstream-freebsd/lib/msun/ld128/k_sinl.c \
    upstream-freebsd/lib/msun/ld128/k_tanl.c \
    upstream-freebsd/lib/msun/ld128/s_erfl.c \
    upstream-freebsd/lib/msun/ld128/s_exp2l.c \
    upstream-freebsd/lib/msun/ld128/s_expl.c \
    upstream-freebsd/lib/msun/ld128/s_logl.c \
    upstream-freebsd/lib/msun/ld128/s_nanl.c \

# TODO: this comes from from upstream's libc, not libm, but it's an
# implementation detail that should have hidden visibility, so it needs
# to be in whatever library the math code is in.
LOCAL_SRC_FILES += \
    digittoint.c  \

# Functionality not in the BSDs.
LOCAL_SRC_FILES += \
    significandl.c \
    sincos.c \

# Modified versions of BSD code.
LOCAL_SRC_FILES += \
    signbit.c \

# Arch specific optimizations.

# -----------------------------------------------------------------------------
# arm
# -----------------------------------------------------------------------------
LOCAL_SRC_FILES_arm += \
    arm/fenv.c \
    upstream-freebsd/lib/msun/src/e_acos.c \
    upstream-freebsd/lib/msun/src/e_asin.c \
    upstream-freebsd/lib/msun/src/e_atan2.c \
    upstream-freebsd/lib/msun/src/e_cosh.c \
    upstream-freebsd/lib/msun/src/e_exp.c \
    upstream-freebsd/lib/msun/src/e_hypot.c \
    upstream-freebsd/lib/msun/src/e_log.c \
    upstream-freebsd/lib/msun/src/e_log10.c \
    upstream-freebsd/lib/msun/src/e_pow.c \
    upstream-freebsd/lib/msun/src/e_sinh.c \
    upstream-freebsd/lib/msun/src/s_atan.c \
    upstream-freebsd/lib/msun/src/s_cbrt.c \
    upstream-freebsd/lib/msun/src/s_ceil.c \
    upstream-freebsd/lib/msun/src/s_ceilf.c \
    upstream-freebsd/lib/msun/src/s_cos.c \
    upstream-freebsd/lib/msun/src/s_fma.c \
    upstream-freebsd/lib/msun/src/s_fmaf.c \
    upstream-freebsd/lib/msun/src/s_floorf.c \
    upstream-freebsd/lib/msun/src/s_expm1.c \
    upstream-freebsd/lib/msun/src/s_llrint.c \
    upstream-freebsd/lib/msun/src/s_llrintf.c \
    upstream-freebsd/lib/msun/src/s_log1p.c \
    upstream-freebsd/lib/msun/src/s_lrint.c \
    upstream-freebsd/lib/msun/src/s_lrintf.c \
    upstream-freebsd/lib/msun/src/s_rint.c \
    upstream-freebsd/lib/msun/src/s_rintf.c \
    upstream-freebsd/lib/msun/src/s_sin.c \
    upstream-freebsd/lib/msun/src/s_tan.c \
    upstream-freebsd/lib/msun/src/s_tanh.c \
    upstream-freebsd/lib/msun/src/s_trunc.c \
    upstream-freebsd/lib/msun/src/s_truncf.c \

# s_floor.S requires neon instructions.
ifdef TARGET_2ND_ARCH
arch_variant := $(TARGET_2ND_ARCH_VARIANT)
else
arch_variant := $(TARGET_ARCH_VARIANT)
endif

# Use the C version on armv7-a since it doesn't support neon instructions.
ifeq ($(arch_variant),armv7-a)
LOCAL_SRC_FILES_arm += \
    upstream-freebsd/lib/msun/src/e_sqrt.c \
    upstream-freebsd/lib/msun/src/e_sqrtf.c \
    upstream-freebsd/lib/msun/src/s_floor.c \

else
LOCAL_SRC_FILES_arm += \
    arm/e_sqrt.S \
    arm/e_sqrtf.S \
    arm/s_floor.S \

endif

# -----------------------------------------------------------------------------
# arm64
# -----------------------------------------------------------------------------
LOCAL_SRC_FILES_arm64 += \
    arm64/ceil.S \
    arm64/fenv.c \
    arm64/fma.S \
    arm64/floor.S \
    arm64/lrint.S \
    arm64/rint.S \
    arm64/sqrt.S \
    arm64/trunc.S \
    upstream-freebsd/lib/msun/src/e_acos.c \
    upstream-freebsd/lib/msun/src/e_asin.c \
    upstream-freebsd/lib/msun/src/e_atan2.c \
    upstream-freebsd/lib/msun/src/e_cosh.c \
    upstream-freebsd/lib/msun/src/e_exp.c \
    upstream-freebsd/lib/msun/src/e_hypot.c \
    upstream-freebsd/lib/msun/src/e_log.c \
    upstream-freebsd/lib/msun/src/e_log10.c \
    upstream-freebsd/lib/msun/src/e_pow.c \
    upstream-freebsd/lib/msun/src/e_sinh.c \
    upstream-freebsd/lib/msun/src/s_atan.c \
    upstream-freebsd/lib/msun/src/s_cbrt.c \
    upstream-freebsd/lib/msun/src/s_cos.c \
    upstream-freebsd/lib/msun/src/s_expm1.c \
    upstream-freebsd/lib/msun/src/s_log1p.c \
    upstream-freebsd/lib/msun/src/s_sin.c \
    upstream-freebsd/lib/msun/src/s_tan.c \
    upstream-freebsd/lib/msun/src/s_tanh.c \

# -----------------------------------------------------------------------------
# mips
# -----------------------------------------------------------------------------
libm_mips_arch_files := \
    mips/fenv.c \
    upstream-freebsd/lib/msun/src/e_acos.c \
    upstream-freebsd/lib/msun/src/e_asin.c \
    upstream-freebsd/lib/msun/src/e_atan2.c \
    upstream-freebsd/lib/msun/src/e_cosh.c \
    upstream-freebsd/lib/msun/src/e_exp.c \
    upstream-freebsd/lib/msun/src/e_hypot.c \
    upstream-freebsd/lib/msun/src/e_log.c \
    upstream-freebsd/lib/msun/src/e_log10.c \
    upstream-freebsd/lib/msun/src/e_pow.c \
    upstream-freebsd/lib/msun/src/e_sinh.c \
    upstream-freebsd/lib/msun/src/e_sqrt.c \
    upstream-freebsd/lib/msun/src/e_sqrtf.c \
    upstream-freebsd/lib/msun/src/s_atan.c \
    upstream-freebsd/lib/msun/src/s_cbrt.c \
    upstream-freebsd/lib/msun/src/s_ceil.c \
    upstream-freebsd/lib/msun/src/s_ceilf.c \
    upstream-freebsd/lib/msun/src/s_cos.c \
    upstream-freebsd/lib/msun/src/s_fma.c \
    upstream-freebsd/lib/msun/src/s_fmaf.c \
    upstream-freebsd/lib/msun/src/s_floor.c \
    upstream-freebsd/lib/msun/src/s_floorf.c \
    upstream-freebsd/lib/msun/src/s_expm1.c \
    upstream-freebsd/lib/msun/src/s_llrint.c \
    upstream-freebsd/lib/msun/src/s_llrintf.c \
    upstream-freebsd/lib/msun/src/s_log1p.c \
    upstream-freebsd/lib/msun/src/s_lrint.c \
    upstream-freebsd/lib/msun/src/s_lrintf.c \
    upstream-freebsd/lib/msun/src/s_rint.c \
    upstream-freebsd/lib/msun/src/s_rintf.c \
    upstream-freebsd/lib/msun/src/s_sin.c \
    upstream-freebsd/lib/msun/src/s_tan.c \
    upstream-freebsd/lib/msun/src/s_tanh.c \
    upstream-freebsd/lib/msun/src/s_trunc.c \
    upstream-freebsd/lib/msun/src/s_truncf.c \

LOCAL_SRC_FILES_mips += $(libm_mips_arch_files)
LOCAL_SRC_FILES_mips64 += $(libm_mips_arch_files)

# -----------------------------------------------------------------------------
# x86
# -----------------------------------------------------------------------------
LOCAL_SRC_FILES_x86 += \
    i387/fenv.c \
    upstream-freebsd/lib/msun/src/s_fma.c \
    upstream-freebsd/lib/msun/src/s_fmaf.c \
    upstream-freebsd/lib/msun/src/s_llrint.c \
    upstream-freebsd/lib/msun/src/s_llrintf.c \
    upstream-freebsd/lib/msun/src/s_lrint.c \
    upstream-freebsd/lib/msun/src/s_lrintf.c \
    upstream-freebsd/lib/msun/src/s_rint.c \
    upstream-freebsd/lib/msun/src/s_rintf.c \
    x86/sqrt.S \
    x86/sqrtf.S \
    x86/e_acos.S \
    x86/e_asin.S \
    x86/e_atan2.S \
    x86/e_cosh.S \
    x86/e_exp.S \
    x86/e_hypot.S \
    x86/e_log10.S \
    x86/e_log.S \
    x86/e_pow.S \
    x86/e_sinh.S \
    x86/libm_reduce_pi04l.S \
    x86/libm_sincos_huge.S \
    x86/libm_tancot_huge.S \
    x86/s_atan.S \
    x86/s_cbrt.S \
    x86/s_cos.S \
    x86/s_expm1.S \
    x86/s_log1p.S \
    x86/s_sin.S \
    x86/s_tanh.S \
    x86/s_tan.S \

ifeq ($(ARCH_X86_HAVE_SSE4_1),true)
LOCAL_SRC_FILES_x86 += \
    x86/ceil.S \
    x86/ceilf.S \
    x86/floor.S \
    x86/floorf.S \
    x86/trunc.S \
    x86/truncf.S \

else
LOCAL_SRC_FILES_x86 += \
    upstream-freebsd/lib/msun/src/s_ceil.c \
    upstream-freebsd/lib/msun/src/s_ceilf.c \
    upstream-freebsd/lib/msun/src/s_floor.c \
    upstream-freebsd/lib/msun/src/s_floorf.c \
    upstream-freebsd/lib/msun/src/s_trunc.c \
    upstream-freebsd/lib/msun/src/s_truncf.c \

endif

# -----------------------------------------------------------------------------
# x86_64
# -----------------------------------------------------------------------------
LOCAL_SRC_FILES_x86_64 += \
    amd64/fenv.c \
    upstream-freebsd/lib/msun/src/s_fma.c \
    upstream-freebsd/lib/msun/src/s_fmaf.c \
    upstream-freebsd/lib/msun/src/s_llrint.c \
    upstream-freebsd/lib/msun/src/s_llrintf.c \
    upstream-freebsd/lib/msun/src/s_lrint.c \
    upstream-freebsd/lib/msun/src/s_lrintf.c \
    upstream-freebsd/lib/msun/src/s_rint.c \
    upstream-freebsd/lib/msun/src/s_rintf.c \
    x86_64/sqrt.S \
    x86_64/sqrtf.S \
    x86_64/e_acos.S \
    x86_64/e_asin.S \
    x86_64/e_atan2.S \
    x86_64/e_cosh.S \
    x86_64/e_exp.S \
    x86_64/e_hypot.S \
    x86_64/e_log10.S \
    x86_64/e_log.S \
    x86_64/e_pow.S \
    x86_64/e_sinh.S \
    x86_64/s_atan.S \
    x86_64/s_cbrt.S \
    x86_64/s_cos.S \
    x86_64/s_expm1.S \
    x86_64/s_log1p.S \
    x86_64/s_sin.S \
    x86_64/s_tanh.S \
    x86_64/s_tan.S \

ifeq ($(ARCH_X86_HAVE_SSE4_1),true)
LOCAL_SRC_FILES_x86_64 += \
    x86_64/ceil.S \
    x86_64/ceilf.S \
    x86_64/floor.S \
    x86_64/floorf.S \
    x86_64/trunc.S \
    x86_64/truncf.S \

else
LOCAL_SRC_FILES_x86_64 += \
    upstream-freebsd/lib/msun/src/s_ceil.c \
    upstream-freebsd/lib/msun/src/s_ceilf.c \
    upstream-freebsd/lib/msun/src/s_floor.c \
    upstream-freebsd/lib/msun/src/s_floorf.c \
    upstream-freebsd/lib/msun/src/s_trunc.c \
    upstream-freebsd/lib/msun/src/s_truncf.c \

endif

LOCAL_C_INCLUDES_x86 += $(LOCAL_PATH)/i387

LOCAL_C_INCLUDES += $(LOCAL_PATH)/upstream-freebsd/lib/msun/src/
LOCAL_C_INCLUDES_64 += $(LOCAL_PATH)/upstream-freebsd/lib/msun/ld128/

LOCAL_CLANG := $(libm_clang)
LOCAL_ARM_MODE := arm
LOCAL_CFLAGS := \
    -DFLT_EVAL_METHOD=0 \
    -include $(LOCAL_PATH)/freebsd-compat.h \
    -Wno-missing-braces \
    -Wno-parentheses \
    -Wno-sign-compare \
    -Wno-uninitialized \
    -Wno-unknown-pragmas \
    -fvisibility=hidden \

LOCAL_ASFLAGS := \
    -Ibionic/libc \

# Workaround the GCC "(long)fn -> lfn" optimization bug which will result in
# self recursions for lrint, lrintf, and lrintl.
# BUG: 14225968
LOCAL_CFLAGS += \
    -fno-builtin-rint \
    -fno-builtin-rintf \
    -fno-builtin-rintl \

LOCAL_CONLY_FLAGS := \
    -std=c99 \

LOCAL_NATIVE_COVERAGE := $(bionic_coverage)
LOCAL_ADDRESS_SANITIZER := false
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/bionic/libdl/Android.mk 
 LOCAL_MODULE := libdl
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_ADDRESS_SANITIZER := false
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/dalvik/libdex/Android.mk 
 LOCAL_MODULE := libdex
LOCAL_32_BIT_ONLY := true
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/dalvik/libdex/Android.mk 
 LOCAL_MODULE := libdex
LOCAL_32_BIT_ONLY := true
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/sanitizer_common/Android.mk 
 LOCAL_MODULE := libsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_C_INCLUDES := $(san_rtl_c_includes)
LOCAL_CPPFLAGS := $(san_rtl_cppflags)
LOCAL_SRC_FILES := $(san_rtl_files) $(san_cdep_files)
LOCAL_CXX_STL := none
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/ubsan/Android.mk 
 LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_C_INCLUDES := $(ubsan_rtl_c_includes)
LOCAL_CPPFLAGS := $(ubsan_rtl_cppflags)
LOCAL_SRC_FILES := $(ubsan_rtl_files)
LOCAL_CXX_STL := none
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/ubsan/Android.mk 
 LOCAL_MODULE := libubsan
LOCAL_CPP_EXTENSION := .cc
LOCAL_C_INCLUDES := $(ubsan_rtl_c_includes)
LOCAL_CPPFLAGS := $(ubsan_rtl_cppflags) -fno-rtti
LOCAL_SRC_FILES := $(ubsan_rtl_files)
LOCAL_CXX_STL := none
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/ubsan/Android.mk 
 LOCAL_MODULE := libubsan_standalone
LOCAL_CPP_EXTENSION := .cc
LOCAL_C_INCLUDES := $(ubsan_rtl_c_includes)
LOCAL_CPPFLAGS := $(ubsan_rtl_cppflags) -fno-rtti
LOCAL_SRC_FILES := $(ubsan_rtl_files)
LOCAL_WHOLE_STATIC_LIBRARIES := libsan
LOCAL_CXX_STL := none
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/ubsan/Android.mk 
 LOCAL_MODULE := libubsan_standalone_cxx
LOCAL_CPP_EXTENSION := .cc
LOCAL_C_INCLUDES := $(ubsan_rtl_c_includes)
LOCAL_CPPFLAGS := $(ubsan_rtl_cppflags)
LOCAL_SRC_FILES := $(ubsan_cxx_rtl_files)
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/asan/Android.mk 
 LOCAL_MODULE := libasan
LOCAL_C_INCLUDES := \
    external/compiler-rt/lib \
    external/compiler-rt/include
LOCAL_CFLAGS += $(asan_rtl_cflags)
LOCAL_SRC_FILES := asan_preinit.cc
#LOCAL_SRC_FILES := asan_android_stub.cc asan_preinit.cc
LOCAL_CPP_EXTENSION := .cc
LOCAL_CLANG := true
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_ADDRESS_SANITIZER := false
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/asan/Android.mk 
 LOCAL_MODULE := libasan
LOCAL_C_INCLUDES := external/compiler-rt/lib external/compiler-rt/include
LOCAL_CFLAGS += $(asan_rtl_cflags)
LOCAL_SRC_FILES := $(asan_rtl_files)
LOCAL_CPP_EXTENSION := .cc
LOCAL_CLANG := true
LOCAL_MULTILIB := both
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_ADDRESS_SANITIZER := false
LOCAL_WHOLE_STATIC_LIBRARIES := libubsan
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/lib/asan/Android.mk 
 LOCAL_MODULE := libasan_cxx
LOCAL_C_INCLUDES := external/compiler-rt/lib external/compiler-rt/include
LOCAL_CFLAGS += $(asan_rtl_cflags)
LOCAL_SRC_FILES := $(asan_rtl_cxx_files)
LOCAL_CPP_EXTENSION := .cc
LOCAL_CLANG := true
LOCAL_MULTILIB := both
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_ADDRESS_SANITIZER := false
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/Android.mk 
 LOCAL_MODULE := libcompiler_rt-extras
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(libcompiler_rt_extras_SRC_FILES)
LOCAL_ADDRESS_SANITIZER := false
LOCAL_MULTILIB := both
LOCAL_CXX_STL := none

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/compiler-rt/Android.mk 
 LOCAL_MODULE := libcompiler_rt
LOCAL_ASFLAGS := -integrated-as
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(call get-libcompiler-rt-source-files,x86_64)
LOCAL_ADDRESS_SANITIZER := false
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MULTILIB := both
LOCAL_CXX_STL := none

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/openfst/Android.mk 
 LOCAL_MODULE := libopenfst-gnustl-rtti
LOCAL_CLANG := true
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/lzma/C/Util/Lzma/Android.mk 
 LOCAL_MODULE := liblzma
LOCAL_SRC_FILES := LzmaUtil.c ../../Alloc.c ../../LzFind.c ../../LzmaDec.c ../../LzmaEnc.c ../../7zFile.c ../../7zStream.c
LOCAL_CFLAGS := -c -O2 -Wall -D_7ZIP_ST
LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/lzma/xz-embedded/Android.mk 
 LOCAL_MODULE := libxz
LOCAL_SRC_FILES := xz_crc32.c xz_dec_lzma2.c xz_dec_stream.c
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/lzma/xz-embedded/Android.mk 
 LOCAL_MODULE := libxz_host
LOCAL_SRC_FILES := xz_crc32.c xz_dec_lzma2.c xz_dec_stream.c 
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/jsoncpp/Android.mk 
 LOCAL_MODULE := \
	libjsoncpp

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/pcre/Android.mk 
 LOCAL_MODULE := libpcre
LOCAL_CFLAGS += -DHAVE_CONFIG_H
LOCAL_C_INCLUDES += $(LOCAL_PATH)/dist
LOCAL_SRC_FILES := $(libpcre_src_files)
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/pcre/Android.mk 
 LOCAL_MODULE := libpcre
LOCAL_CFLAGS += -DHAVE_CONFIG_H
LOCAL_C_INCLUDES += $(LOCAL_PATH)/dist
LOCAL_SRC_FILES := $(libpcre_src_files)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/boringssl/Android.mk 
 LOCAL_MODULE := libcrypto_static
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/src/include
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk $(LOCAL_PATH)/crypto-sources.mk
LOCAL_SDK_VERSION := 9
LOCAL_CFLAGS = -Wno-unused-parameter
# sha256-armv4.S does not compile with clang.
LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
ifeq ($(TARGET_ARCH),arm64)
ifeq ($(USE_CLANG_PLATFORM_BUILD),true)
LOCAL_ASFLAGS += -march=armv8-a+crypto
endif
endif
include $(LOCAL_PATH)/crypto-sources.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/boringssl/Android.mk 
 LOCAL_MODULE := libcrypto_static
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/src/include
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk $(LOCAL_PATH)/crypto-sources.mk
LOCAL_CFLAGS = -Wno-unused-parameter
# Windows and Macs both have problems with assembly files
ifneq ($(HOST_OS),linux)
LOCAL_CFLAGS += -DOPENSSL_NO_ASM
endif
include $(LOCAL_PATH)/crypto-sources.mk
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/boringssl/Android.mk 
 LOCAL_MODULE := libssl_static
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/src/include
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk $(LOCAL_PATH)/ssl-sources.mk
LOCAL_SDK_VERSION := 9
LOCAL_CFLAGS = -Wno-unused-parameter
include $(LOCAL_PATH)/ssl-sources.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/boringssl/Android.mk 
 LOCAL_MODULE := libssl_static-host
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/src/include
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk $(LOCAL_PATH)/ssl-sources.mk
LOCAL_CFLAGS = -Wno-unused-parameter
include $(LOCAL_PATH)/ssl-sources.mk
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/google-breakpad/Android.mk 
 LOCAL_MODULE := breakpad_client

LOCAL_CPP_EXTENSION := .cc

LOCAL_SRC_FILES := \
    src/client/linux/dump_writer_common/seccomp_unwinder.cc \
    src/client/linux/dump_writer_common/thread_info.cc \
    src/client/linux/dump_writer_common/ucontext_reader.cc \
    src/client/linux/handler/minidump_descriptor.cc \
    src/client/linux/minidump_writer/linux_core_dumper.cc \
    src/client/linux/minidump_writer/linux_dumper.cc \
    src/client/linux/minidump_writer/linux_ptrace_dumper.cc \
    src/client/linux/minidump_writer/minidump_writer.cc \
    src/client/minidump_file_writer.cc \
    src/common/convert_UTF.c \
    src/common/linux/elf_core_dump.cc \
    src/common/linux/elfutils.cc \
    src/common/linux/file_id.cc \
    src/common/linux/guid_creator.cc \
    src/common/linux/linux_libc_support.cc \
    src/common/linux/memory_mapped_file.cc \
    src/common/linux/safe_readlink.cc \
    src/common/string_conversion.cc \

LOCAL_C_INCLUDES := \
    $(LOCAL_PATH)/src/common/android/include \
    $(LOCAL_PATH)/src \

LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_C_INCLUDES)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/google-breakpad/android/google_breakpad/Android.mk 
 LOCAL_MODULE := breakpad_client

LOCAL_CPP_EXTENSION := .cc

# Breakpad uses inline ARM assembly that requires the library
# to be built in ARM mode. Otherwise, the build will fail with
# cryptic assembler messages like:
#   Compile++ thumb  : google_breakpad_client <= crash_generation_client.cc
#   /tmp/cc8aMSoD.s: Assembler messages:
#   /tmp/cc8aMSoD.s:132: Error: invalid immediate: 288 is out of range
#   /tmp/cc8aMSoD.s:244: Error: invalid immediate: 296 is out of range
LOCAL_ARM_MODE := arm

# List of client source files, directly taken from Makefile.am
LOCAL_SRC_FILES := \
    src/client/linux/crash_generation/crash_generation_client.cc \
    src/client/linux/handler/exception_handler.cc \
    src/client/linux/handler/minidump_descriptor.cc \
    src/client/linux/log/log.cc \
    src/client/linux/minidump_writer/linux_dumper.cc \
    src/client/linux/minidump_writer/linux_ptrace_dumper.cc \
    src/client/linux/minidump_writer/minidump_writer.cc \
    src/client/minidump_file_writer.cc \
    src/common/android/breakpad_getcontext.S \
    src/common/convert_UTF.c \
    src/common/md5.cc \
    src/common/string_conversion.cc \
    src/common/linux/elfutils.cc \
    src/common/linux/file_id.cc \
    src/common/linux/guid_creator.cc \
    src/common/linux/linux_libc_support.cc \
    src/common/linux/memory_mapped_file.cc \
    src/common/linux/safe_readlink.cc

LOCAL_C_INCLUDES        := $(LOCAL_PATH)/src/common/android/include \
                           $(LOCAL_PATH)/src

LOCAL_EXPORT_C_INCLUDES := $(LOCAL_C_INCLUDES)
LOCAL_EXPORT_LDLIBS     := -llog

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/bison/Android.mk 
 LOCAL_MODULE := libbison

LOCAL_C_INCLUDES := \
    $(LOCAL_PATH)/$(BUILD_OS)-lib \
    $(LOCAL_PATH)/lib

LOCAL_SRC_FILES := \
    lib/abitset.c \
    lib/argmatch.c \
    lib/asnprintf.c \
    lib/basename-lgpl.c \
    lib/basename.c \
    lib/binary-io.c \
    lib/bitrotate.c \
    lib/bitset.c \
    lib/bitset_stats.c \
    lib/bitsetv-print.c \
    lib/bitsetv.c \
    lib/c-ctype.c \
    lib/c-strcasecmp.c \
    lib/c-strncasecmp.c \
    lib/cloexec.c \
    lib/close-stream.c \
    lib/closeout.c \
    lib/dirname-lgpl.c \
    lib/dirname.c \
    lib/dup-safer-flag.c \
    lib/dup-safer.c \
    lib/ebitset.c \
    lib/exitfail.c \
    lib/fatal-signal.c \
    lib/fd-hook.c \
    lib/fd-safer-flag.c \
    lib/fd-safer.c \
    lib/fopen-safer.c \
    lib/fprintf.c \
    lib/fseterr.c \
    lib/get-errno.c \
    lib/hash.c \
    lib/isnand.c \
    lib/isnanf.c \
    lib/isnanl.c \
    lib/lbitset.c \
    lib/localcharset.c \
    lib/math.c \
    lib/mbchar.c \
    lib/mbschr.c \
    lib/mbsrchr.c \
    lib/mbswidth.c \
    lib/mbuiter.c \
    lib/pipe-safer.c \
    lib/pipe2-safer.c \
    lib/pipe2.c \
    lib/printf-args.c \
    lib/printf-frexp.c \
    lib/printf-frexpl.c \
    lib/printf-parse.c \
    lib/printf.c \
    lib/progname.c \
    lib/quotearg.c \
    lib/sig-handler.c \
    lib/snprintf.c \
    lib/spawn-pipe.c \
    lib/sprintf.c \
    lib/stdio.c \
    lib/strerror_r.c \
    lib/stripslash.c \
    lib/strnlen1.c \
    lib/timevar.c \
    lib/unistd.c \
    lib/vasnprintf.c \
    lib/vbitset.c \
    lib/vfprintf.c \
    lib/vsnprintf.c \
    lib/vsprintf.c \
    lib/wait-process.c \
    lib/wctype-h.c \
    lib/xalloc-die.c \
    lib/xmalloc.c \
    lib/xmemdup0.c \
    lib/xsize.c \
    lib/xstrndup.c \
    lib/yyerror.c \
    lib/glthread/lock.c \
    lib/glthread/threadlib.c \
    lib/uniwidth/width.c

ifeq ($(BUILD_OS),darwin)
LOCAL_SRC_FILES += \
    lib/error.c \
    lib/fpending.c \
    lib/getdelim.c \
    lib/getline.c \
    lib/getopt.c \
    lib/getopt1.c \
    lib/obstack.c \
    lib/obstack_printf.c \
    lib/open.c \
    lib/perror.c \
    lib/rawmemchr.c \
    lib/stat.c \
    lib/strchrnul.c \
    lib/strerror-override.c \
    lib/strerror.c \
    lib/strndup.c \
    lib/strnlen.c \
    lib/strverscmp.c \
    lib/wcwidth.c
endif

ifeq ($(BUILD_OS),linux)
LOCAL_SRC_FILES += \
    lib/fcntl.c
endif

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libxml2/Android.mk 
 LOCAL_MODULE := libxml2
LOCAL_CLANG := true
LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libxml2/Android.mk 
 LOCAL_MODULE := libxml2
LOCAL_CLANG := true
LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libcxx/Android.mk 
 LOCAL_MODULE := libc++_static
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(LIBCXX_SRC_FILES)
LOCAL_C_INCLUDES := $(LIBCXX_C_INCLUDES)
LOCAL_CPPFLAGS := $(LIBCXX_CPPFLAGS)
LOCAL_RTTI_FLAG := -frtti
LOCAL_WHOLE_STATIC_LIBRARIES := libc++abi
LOCAL_CXX_STL := none
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libcxx/Android.mk 
 LOCAL_MODULE := libc++_static
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(LIBCXX_SRC_FILES)
LOCAL_C_INCLUDES := $(LIBCXX_C_INCLUDES)
LOCAL_CPPFLAGS := $(LIBCXX_CPPFLAGS)
LOCAL_RTTI_FLAG := -frtti
LOCAL_WHOLE_STATIC_LIBRARIES := libc++abi
LOCAL_MULTILIB := both
LOCAL_CXX_STL := none
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/f2fs-tools/Android.mk 
 LOCAL_MODULE := libf2fs_fmt
LOCAL_SRC_FILES := \
	lib/libf2fs.c \
	mkfs/f2fs_format.c \
	mkfs/f2fs_format_utils.c \

LOCAL_C_INCLUDES := $(common_C_INCLUDES)
LOCAL_CFLAGS := $(version_CFLAGS)
LOCAL_EXPORT_CFLAGS := $(version_CFLAGS)
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/mkfs
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/f2fs-tools/Android.mk 
 LOCAL_MODULE := libf2fs_fmt_host
LOCAL_SRC_FILES := \
	lib/libf2fs.c \
	mkfs/f2fs_format.c \
	mkfs/f2fs_format_utils.c \

LOCAL_C_INCLUDES := $(common_C_INCLUDES)
LOCAL_CFLAGS := $(version_CFLAGS)
LOCAL_EXPORT_CFLAGS := $(version_CFLAGS)
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/mkfs
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/jpeg/Android.mk 
 LOCAL_MODULE := libjpeg_static

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/webp/src/Android.mk 
 LOCAL_MODULE := libwebp-encode

LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/webp/src/Android.mk 
 LOCAL_MODULE := libwebp-decode

LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/vboot_reference/Android.mk 
 LOCAL_MODULE := libvboot_util-host

ifeq ($(HOST_OS),darwin)
LOCAL_CFLAGS += -DHAVE_MACOS -DO_LARGEFILE=0
endif

# These are required to access large disks and files on 32-bit systems.
LOCAL_CFLAGS += -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64

LOCAL_C_INCLUDES += \
	$(LOCAL_PATH)/firmware/include \
	$(LOCAL_PATH)/firmware/lib/include \
	$(LOCAL_PATH)/firmware/lib/cgptlib/include \
	$(LOCAL_PATH)/firmware/lib/cryptolib/include \
	$(LOCAL_PATH)/firmware/lib/tpm_lite/include \
	$(LOCAL_PATH)/firmware/2lib/include \
	$(LOCAL_PATH)/host/include \
	$(LOCAL_PATH)/host/lib/include

# Firmware library sources needed by VbInit() call
VBINIT_SRCS = \
	firmware/lib/crc8.c \
	firmware/lib/utility.c \
	firmware/lib/vboot_api_init.c \
	firmware/lib/vboot_common_init.c \
	firmware/lib/vboot_nvstorage.c \
	firmware/lib/vboot_nvstorage_rollback.c \
	firmware/lib/region-init.c \

# Additional firmware library sources needed by VbSelectFirmware() call
VBSF_SRCS = \
	firmware/lib/cryptolib/padding.c \
	firmware/lib/cryptolib/rsa.c \
	firmware/lib/cryptolib/rsa_utility.c \
	firmware/lib/cryptolib/sha1.c \
	firmware/lib/cryptolib/sha256.c \
	firmware/lib/cryptolib/sha512.c \
	firmware/lib/cryptolib/sha_utility.c \
	firmware/lib/stateful_util.c \
	firmware/lib/vboot_api_firmware.c \
	firmware/lib/vboot_common.c \
	firmware/lib/vboot_firmware.c \
	firmware/lib/region-fw.c \

# Additional firmware library sources needed by VbSelectAndLoadKernel() call
VBSLK_SRCS = \
	firmware/lib/cgptlib/cgptlib.c \
	firmware/lib/cgptlib/cgptlib_internal.c \
	firmware/lib/cgptlib/crc32.c \
	firmware/lib/gpt_misc.c \
	firmware/lib/utility_string.c \
	firmware/lib/vboot_api_kernel.c \
	firmware/lib/vboot_audio.c \
	firmware/lib/vboot_display.c \
	firmware/lib/vboot_kernel.c \
	firmware/lib/region-kernel.c \

VBINIT_SRCS += \
	firmware/stub/tpm_lite_stub.c \
	firmware/stub/utility_stub.c \
	firmware/stub/vboot_api_stub_init.c \
	firmware/stub/vboot_api_stub_region.c

VBSF_SRCS += \
	firmware/stub/vboot_api_stub_sf.c

VBSLK_SRCS += \
	firmware/stub/vboot_api_stub.c \
	firmware/stub/vboot_api_stub_disk.c \
	firmware/stub/vboot_api_stub_stream.c

UTILLIB_SRCS = \
	cgpt/cgpt_create.c \
	cgpt/cgpt_add.c \
	cgpt/cgpt_boot.c \
	cgpt/cgpt_show.c \
	cgpt/cgpt_repair.c \
	cgpt/cgpt_prioritize.c \
	cgpt/cgpt_common.c \
	futility/dump_kernel_config_lib.c \
	host/lib/crossystem.c \
	host/lib/file_keys.c \
	host/lib/fmap.c \
	host/lib/host_common.c \
	host/lib/host_key.c \
	host/lib/host_keyblock.c \
	host/lib/host_misc.c \
	host/lib/util_misc.c \
	host/lib/host_signature.c \
	host/lib/signature_digest.c

#	host/arch/${HOST_ARCH}/lib/crossystem_arch.c \

LOCAL_SRC_FILES := \
	$(VBINIT_SRCS) \
	$(VBSF_SRCS) \
	$(VBSLK_SRCS) \
	$(UTILLIB_SRCS)

LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_C_INCLUDES)
LOCAL_STATIC_LIBRARIES := libcrypto_static

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/fdlibm/Android.mk 
 LOCAL_MODULE := libfdlibm
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/fdlibm/Android.mk 
 LOCAL_MODULE := libfdlibm
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/conscrypt/Android.mk 
 LOCAL_MODULE := libconscrypt_static
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_STATIC_LIBRARIES := libssl_static libcrypto_static
LOCAL_SDK_VERSION := 9
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libvpx/libvpx/third_party/libwebm/Android.mk 
 LOCAL_MODULE := libwebm
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libvpx/libvpx/test/android/Android.mk 
 LOCAL_MODULE := gtest
LOCAL_C_INCLUDES := $(LOCAL_PATH)/third_party/googletest/src/
LOCAL_C_INCLUDES += $(LOCAL_PATH)/third_party/googletest/src/include/
LOCAL_SRC_FILES := ./third_party/googletest/src/src/gtest-all.cc
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libvpx/libwebm.mk 
 LOCAL_MODULE := libwebm

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libcxxabi/Android.mk 
 LOCAL_MODULE := libunwind_llvm
LOCAL_CLANG := true
LOCAL_SRC_FILES_arm := $(LLVM_UNWIND_SRC_FILES)
LOCAL_C_INCLUDES := $(LIBCXXABI_INCLUDES)
LOCAL_CPPFLAGS := $(LIBCXXABI_CPPFLAGS)
LOCAL_CXX_STL := none
# src/Unwind/UnwindRegistersSave.S does not compile.
LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libcxxabi/Android.mk 
 LOCAL_MODULE := libc++abi
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(LIBCXXABI_SRC_FILES)
LOCAL_C_INCLUDES := $(LIBCXXABI_INCLUDES)
LOCAL_CPPFLAGS := $(LIBCXXABI_CPPFLAGS) -DHAVE___CXA_THREAD_ATEXIT_IMPL
LOCAL_CPPFLAGS_arm := -DLIBCXXABI_USE_LLVM_UNWINDER=1
LOCAL_CPPFLAGS_arm64 := -DLIBCXXABI_USE_LLVM_UNWINDER=0
LOCAL_CPPFLAGS_mips := -DLIBCXXABI_USE_LLVM_UNWINDER=0
LOCAL_CPPFLAGS_mips64 := -DLIBCXXABI_USE_LLVM_UNWINDER=0
LOCAL_CPPFLAGS_x86 := -DLIBCXXABI_USE_LLVM_UNWINDER=0
LOCAL_CPPFLAGS_x86_64 := -DLIBCXXABI_USE_LLVM_UNWINDER=0
LOCAL_CXX_STL := none
LOCAL_RTTI_FLAG := $(LIBCXXABI_RTTI_FLAG)
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
# src/Unwind/UnwindRegistersSave.S does not compile.
LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
# When src/cxa_exception.cpp is compiled with Clang assembler
# __cxa_end_cleanup_impl, although marked as used, was discarded
# since it is used only in embedded assembly code.
# This caused the following warning when linking libc++.so:
# libc++_static.a(cxa_exception.o)(.text.__cxa_end_cleanup+0x2):
# warning: relocation refers to discarded section
# See also http://llvm.org/bugs/show_bug.cgi?id=21292.
LOCAL_CLANG_CFLAGS_arm += -no-integrated-as
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libcxxabi/Android.mk 
 LOCAL_MODULE := libc++abi
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(LIBCXXABI_SRC_FILES)
LOCAL_C_INCLUDES := $(LIBCXXABI_INCLUDES)
LOCAL_CPPFLAGS := $(LIBCXXABI_CPPFLAGS)
LOCAL_CXX_STL := none

ifeq ($(HOST_OS),darwin)
LOCAL_SRC_FILES += $(LLVM_UNWIND_SRC_FILES) src/Unwind/Unwind_AppleExtras.cpp
# libcxxabi really doesn't like the non-LLVM assembler on Darwin
LOCAL_ASFLAGS += -integrated-as
LOCAL_CFLAGS += -integrated-as
LOCAL_CPPFLAGS += -integrated-as
endif

LOCAL_RTTI_FLAG := $(LIBCXXABI_RTTI_FLAG)
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest_ndk

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest_main_ndk

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest_host
LOCAL_MULTILIB := both
LOCAL_ADDRESS_SANITIZER := false

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest_main_host
LOCAL_MULTILIB := both
LOCAL_ADDRESS_SANITIZER := false

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest
LOCAL_ADDRESS_SANITIZER := false

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/gtest/src/Android.mk 
 LOCAL_MODULE := libgtest_main
LOCAL_ADDRESS_SANITIZER := false

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/ceres-solver/jni/Android.mk 
 LOCAL_MODULE := ceres
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/ceres-solver/Android.mk 
 LOCAL_MODULE := libceres
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libdrm/Android.mk 
 LOCAL_MODULE := libdrm
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/icu/android_utils/Android.mk 
 LOCAL_MODULE := libicuandroid_utils
LOCAL_C_INCLUDES := include
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/icu/android_utils/Android.mk 
 LOCAL_MODULE := libicuandroid_utils-host
LOCAL_C_INCLUDES := include
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/icu/icu4c/source/i18n/Android.mk 
 LOCAL_MODULE := libicui18n_static
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/icu/icu4c/source/common/Android.mk 
 LOCAL_MODULE := libicuuc_static
LOCAL_SRC_FILES += $(src_files)
LOCAL_REQUIRED_MODULES += icu-data
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/svox/pico/lib/Android.mk 
 LOCAL_MODULE := libsvoxpico

LOCAL_SRC_FILES := \
	picoacph.c \
	picoapi.c \
	picobase.c \
	picocep.c \
	picoctrl.c \
	picodata.c \
	picodbg.c \
	picoextapi.c \
	picofftsg.c \
	picokdbg.c \
	picokdt.c \
	picokfst.c \
	picoklex.c \
	picoknow.c \
	picokpdf.c \
	picokpr.c \
	picoktab.c \
	picoos.c \
	picopal.c \
	picopam.c \
	picopr.c \
	picorsrc.c \
	picosa.c \
	picosig.c \
	picosig2.c \
	picospho.c \
	picotok.c \
	picotrns.c \
	picowa.c

LOCAL_CFLAGS+= $(TOOL_CFLAGS)
LOCAL_LDFLAGS+= $(TOOL_LDFLAGS)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/svox/pico/tts/Android.mk 
 LOCAL_MODULE := libttspico_engine

LOCAL_SRC_FILES := \
	com_svox_picottsengine.cpp \
	svox_ssml_parser.cpp

LOCAL_C_INCLUDES += \
	external/svox/pico/lib \
	external/svox/pico/compat/include

LOCAL_STATIC_LIBRARIES := libsvoxpico

LOCAL_SHARED_LIBRARIES := \
	libcutils \
	libexpat \
	libutils \
	liblog

LOCAL_ARM_MODE := arm

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/elfutils/src/libelf/Android.mk 
 LOCAL_MODULE := libelf

LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/elfutils/src/libelf/Android.mk 
 LOCAL_MODULE := libelf

LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/egl/drivers/dri2/Android.mk 
 LOCAL_MODULE := libmesa_egl_dri2

include $(MESA_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/mesa/Android.mk 
 LOCAL_MODULE := libmesa_st_mesa

include $(LOCAL_PATH)/Android.gen.mk
include $(MESA_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/mesa/Android.mk 
 LOCAL_MODULE := libmesa_glsl_utils

include $(MESA_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/mesa/Android.mk 
 LOCAL_MODULE := libmesa_glsl_utils
LOCAL_IS_HOST_MODULE := true

include $(MESA_COMMON_MK)
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/glsl/Android.mk 
 LOCAL_MODULE := libmesa_glsl

include $(LOCAL_PATH)/Android.gen.mk
include $(MESA_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/state_trackers/egl/Android.mk 
 LOCAL_MODULE := libmesa_st_egl

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/winsys/nouveau/drm/Android.mk 
 LOCAL_MODULE := libmesa_winsys_nouveau

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/winsys/sw/android/Android.mk 
 LOCAL_MODULE := libmesa_winsys_sw_android

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/winsys/svga/drm/Android.mk 
 LOCAL_MODULE := libmesa_winsys_svga

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/winsys/radeon/drm/Android.mk 
 LOCAL_MODULE := libmesa_winsys_radeon

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/winsys/i915/drm/Android.mk 
 LOCAL_MODULE := libmesa_winsys_i915

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/targets/egl-static/Android.mk 
 LOCAL_MODULE := libmesa_egl_gallium

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/nouveau/Android.mk 
 LOCAL_MODULE := libmesa_pipe_nouveau

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/softpipe/Android.mk 
 LOCAL_MODULE := libmesa_pipe_softpipe

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/nvc0/Android.mk 
 LOCAL_MODULE := libmesa_pipe_nvc0

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/nv50/Android.mk 
 LOCAL_MODULE := libmesa_pipe_nv50

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/radeonsi/Android.mk 
 LOCAL_MODULE := libmesa_pipe_radeonsi

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/svga/Android.mk 
 LOCAL_MODULE := libmesa_pipe_svga

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/r300/Android.mk 
 LOCAL_MODULE := libmesa_pipe_r300

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/i915/Android.mk 
 LOCAL_MODULE := libmesa_pipe_i915

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/nv30/Android.mk 
 LOCAL_MODULE := libmesa_pipe_nv30

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/mesa3d/src/gallium/drivers/r600/Android.mk 
 LOCAL_MODULE := libmesa_pipe_r600

include $(GALLIUM_COMMON_MK)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/safe-iop/Android.mk 
 LOCAL_MODULE := libsafe_iop

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/lz4/lib/Android.mk 
 LOCAL_MODULE := liblz4
LOCAL_SRC_FILES := $(liblz4_src_files)
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/tinyalsa/Android.mk 
 LOCAL_MODULE := libtinyalsa
LOCAL_STATIC_LIBRARIES:= libcutils libutils
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/bzip2/Android.mk 
 LOCAL_MODULE := libbz
LOCAL_CFLAGS += -O3 -DUSE_MMAP
ifeq ($(TARGET_ARCH),arm)
  LOCAL_SDK_VERSION := 9
endif
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/bzip2/Android.mk 
 LOCAL_MODULE := libbz
LOCAL_CFLAGS += -O3 -DUSE_MMAP
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/libnl/Android.mk 
 LOCAL_MODULE := libnl

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/eigen/blas/Android.mk 
 LOCAL_MODULE := libF77blas

LOCAL_SRC_FILES := $(eigen_SRC_FILES)
LOCAL_C_INCLUDES += external/eigen/

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/eigen/blas/Android.mk 
 LOCAL_MODULE := libF77blasV8
LOCAL_SDK_VERSION := 8
LOCAL_NDK_STL_VARIANT := stlport_static

LOCAL_SRC_FILES := $(eigen_SRC_FILES)
LOCAL_C_INCLUDES += external/eigen/

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/liblzf/Android.mk 
 LOCAL_MODULE := liblzf
LOCAL_SRC_FILES := $(libLZF_SRC_FILES)

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/external/liblzf/Android.mk 
 LOCAL_MODULE := liblzf
LOCAL_SRC_FILES := $(libLZF_SRC_FILES)

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/services/audioflinger/Android.mk 
 LOCAL_MODULE := libscheduling_policy

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/services/audiopolicy/common/managerdefinitions/Android.mk 
 LOCAL_MODULE := libaudiopolicycomponents

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libcpustats/Android.mk 
 LOCAL_MODULE := libcpustats

LOCAL_CFLAGS := -std=gnu++11 -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/amrwb/Android.mk 
 LOCAL_MODULE := libstagefright_amrwbdec

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/mp3dec/Android.mk 
 LOCAL_MODULE := libstagefright_mp3dec

LOCAL_ARM_MODE := arm

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/m4v_h263/dec/Android.mk 
 LOCAL_MODULE := libstagefright_m4vh263dec

LOCAL_C_INCLUDES := \
	$(LOCAL_PATH)/src \
	$(LOCAL_PATH)/include \
	$(TOP)/frameworks/av/media/libstagefright/include \
	$(TOP)/frameworks/native/include/media/openmax

LOCAL_CFLAGS := -DOSCL_EXPORT_REF= -DOSCL_IMPORT_REF=

LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/m4v_h263/enc/Android.mk 
 LOCAL_MODULE := libstagefright_m4vh263enc

LOCAL_CFLAGS := \
    -DBX_RC \
    -DOSCL_IMPORT_REF= -D"OSCL_UNUSED_ARG(x)=(void)(x)" -DOSCL_EXPORT_REF=

LOCAL_C_INCLUDES := \
    $(LOCAL_PATH)/src \
    $(LOCAL_PATH)/include \
    $(TOP)/frameworks/av/media/libstagefright/include \
    $(TOP)/frameworks/native/include/media/openmax

LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/amrnb/dec/Android.mk 
 LOCAL_MODULE := libstagefright_amrnbdec

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/amrnb/enc/Android.mk 
 LOCAL_MODULE := libstagefright_amrnbenc

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/amrwbenc/Android.mk 
 LOCAL_MODULE := libstagefright_amrwbenc

LOCAL_ARM_MODE := arm

LOCAL_STATIC_LIBRARIES :=

LOCAL_SHARED_LIBRARIES :=

LOCAL_C_INCLUDES := \
	frameworks/av/include \
	frameworks/av/media/libstagefright/include \
	frameworks/av/media/libstagefright/codecs/common/include \
	$(LOCAL_PATH)/src \
	$(LOCAL_PATH)/inc

ifeq ($(VOTT), v5)
LOCAL_CFLAGS += -DARM -DASM_OPT
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV5E
endif

ifeq ($(VOTT), v7)
LOCAL_CFLAGS += -DARM -DARMV7 -DASM_OPT
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV5E
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV7
endif

LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/avc/enc/Android.mk 
 LOCAL_MODULE := libstagefright_avcenc

LOCAL_C_INCLUDES := \
    $(LOCAL_PATH)/src \
    $(LOCAL_PATH)/../common/include \
    $(TOP)/frameworks/av/media/libstagefright/include \
    $(TOP)/frameworks/native/include/media/openmax

LOCAL_CFLAGS := \
    -DOSCL_IMPORT_REF= -D"OSCL_UNUSED_ARG(x)=(void)(x)" -DOSCL_EXPORT_REF=

LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/codecs/aacenc/Android.mk 
 LOCAL_MODULE := libstagefright_aacenc

LOCAL_ARM_MODE := arm

LOCAL_STATIC_LIBRARIES :=

LOCAL_SHARED_LIBRARIES :=

LOCAL_C_INCLUDES := \
	frameworks/av/include \
	frameworks/av/media/libstagefright/include \
	frameworks/av/media/libstagefright/codecs/common/include \
	$(LOCAL_PATH)/src \
	$(LOCAL_PATH)/inc \
	$(LOCAL_PATH)/basic_op

ifeq ($(VOTT), v5)
LOCAL_CFLAGS += -DARMV5E -DARM_INASM -DARMV5_INASM
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV5E
endif

ifeq ($(VOTT), v7)
LOCAL_CFLAGS += -DARMV5E -DARMV7Neon -DARM_INASM -DARMV5_INASM -DARMV6_INASM
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV5E
LOCAL_C_INCLUDES += $(LOCAL_PATH)/src/asm/ARMV7
endif

LOCAL_CFLAGS += -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/av/media/libstagefright/id3/Android.mk 
 LOCAL_MODULE := libstagefright_id3

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/ml/bordeaux/learning/stochastic_linear_ranker/Android.mk 
 LOCAL_MODULE := libstochastic_linear

LOCAL_SRC_FILES := native/stochastic_linear_ranker.cpp \
                   native/sparse_weight_vector.cpp \
                   jni/jni_stochastic_linear_ranker.cpp


LOCAL_C_INCLUDES += $(LOCAL_PATH)/../native

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/ml/bordeaux/learning/multiclass_pa/Android.mk 
 LOCAL_MODULE := libmulticlass_pa

LOCAL_SRC_FILES := native/multiclass_pa.cpp \
                   jni/jni_multiclass_pa.cpp


LOCAL_C_INCLUDES += $(LOCAL_PATH)/../native

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/native/cmds/dumpstate/Android.mk 
 LOCAL_MODULE := libdumpstate.default
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/native/libs/input/tests/Android.mk 
 LOCAL_MODULE := StructLayout_test
LOCAL_CFLAGS := -std=c++11 -O0
LOCAL_MULTILIB := both
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/native/libs/binder/Android.mk 
 LOCAL_MODULE := libbinder
LOCAL_STATIC_LIBRARIES += libutils
LOCAL_SRC_FILES := $(sources)
ifneq ($(TARGET_USES_64_BIT_BINDER),true)
ifneq ($(TARGET_IS_64_BIT),true)
LOCAL_CFLAGS += -DBINDER_IPC_32BIT=1
endif
endif
LOCAL_CFLAGS += -Werror
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/opt/net/wifi/service/Android.mk 
 LOCAL_MODULE := libwifi-hal

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/opt/net/wifi/service/Android.mk 
 LOCAL_MODULE := libwifi-hal-stub

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/base/tools/aapt/Android.mk 
 LOCAL_MODULE := libaapt
LOCAL_CFLAGS += -Wno-format-y2k -DSTATIC_ANDROIDFW_FOR_TOOLS $(aaptCFlags)
LOCAL_CPPFLAGS += $(aaptCppFlags)
ifeq (darwin,$(HOST_OS))
LOCAL_CFLAGS += -D_DARWIN_UNLIMITED_STREAMS
endif
LOCAL_C_INCLUDES += $(aaptCIncludes)
LOCAL_SRC_FILES := $(aaptSources)

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/base/tools/aapt2/Android.mk 
 LOCAL_MODULE := libaapt2

LOCAL_SRC_FILES := $(sources)
LOCAL_C_INCLUDES += $(cIncludes)
LOCAL_CFLAGS += $(cFlags)
LOCAL_CPPFLAGS += $(cppFlags)

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/base/tools/split-select/Android.mk 
 LOCAL_MODULE := libsplit-select

LOCAL_SRC_FILES := $(sources)

LOCAL_C_INCLUDES += $(cIncludes)
LOCAL_CFLAGS += $(cFlags) -D_DARWIN_UNLIMITED_STREAMS

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/base/media/mca/filterfw/native/Android.mk 
 LOCAL_MODULE := libfilterfw_native

LOCAL_SRC_FILES += core/geometry.cpp \
                   core/gl_env.cpp \
                   core/gl_frame.cpp \
                   core/native_frame.cpp \
                   core/native_program.cpp \
                   core/shader_program.cpp \
                   core/vertex_frame.cpp \
                   core/value.cpp

# add local includes
include $(LOCAL_PATH)/libfilterfw.mk

# gcc should always be placed at the end.
LOCAL_EXPORT_LDLIBS := -llog -lgcc

LOCAL_CFLAGS += -Wall -Werror -Wunused -Wunreachable-code

# TODO: Build a shared library as well?
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/base/media/mca/filterpacks/Android.mk 
 LOCAL_MODULE := libfilterpack_base
LOCAL_SRC_FILES := native/base/geometry.cpp \
                   native/base/time_util.cpp

LOCAL_CFLAGS := -DANDROID

LOCAL_CFLAGS += -Wall -Werror -Wunused -Wunreachable-code

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/frameworks/wilhelm/src/Android.mk 
 LOCAL_MODULE := libOpenSLESUT

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/device/asus/fugu/recovery/Android.mk 
 LOCAL_MODULE := librecovery_updater_fugu
LOCAL_SRC_FILES := recovery_updater.c fw_version_check.c
LOCAL_C_INCLUDES += bootable/recovery

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/device/asus/fugu/recovery/Android.mk 
 LOCAL_MODULE := librecovery_ui_fugu

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/cts/tests/tests/nativeopengl/standalone/jni/Android.mk 
 LOCAL_MODULE := libgtest
LOCAL_C_INCLUDES := $(MY_GTEST_PATH)/include
LOCAL_SRC_FILES := src/gtest-all.cc

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/security/keystore/Android.mk 
 LOCAL_MODULE := libkeystore_test
LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_STATIC_LIBRARIES := libgtest_main
LOCAL_SHARED_LIBRARIES := libkeymaster_messages
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/toolbox/Android.mk 
 LOCAL_MODULE := libtoolbox_dd
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/toolbox/Android.mk 
 LOCAL_MODULE := libtoolbox_du
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libsparse/Android.mk 
 LOCAL_MODULE := libsparse_host
LOCAL_STATIC_LIBRARIES := libz
LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_CFLAGS := -Werror
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libsparse/Android.mk 
 LOCAL_MODULE := libsparse_static
LOCAL_C_INCLUDES += $(LOCAL_PATH)/include
LOCAL_STATIC_LIBRARIES := libz
LOCAL_CFLAGS := -Werror
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/liblog/Android.mk 
 LOCAL_MODULE := liblog
LOCAL_SRC_FILES := $(liblog_host_sources)
LOCAL_CFLAGS := -DFAKE_LOG_DEVICE=1 -Werror $(liblog_cflags)
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/liblog/Android.mk 
 LOCAL_MODULE := liblog
LOCAL_SRC_FILES := $(liblog_target_sources)
LOCAL_CFLAGS := -Werror $(liblog_cflags)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/healthd/Android.mk 
 LOCAL_MODULE := libhealthd.default
LOCAL_CFLAGS := -Werror
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libusbhost/Android.mk 
 LOCAL_MODULE := libusbhost
LOCAL_SRC_FILES := usbhost.c
LOCAL_CFLAGS := -Werror

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libusbhost/Android.mk 
 LOCAL_MODULE := libusbhost
LOCAL_SRC_FILES := usbhost.c
LOCAL_CFLAGS := -Werror

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/init/Android.mk 
 LOCAL_MODULE := libinit
LOCAL_CLANG := $(init_clang)
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/adb/Android.mk 
 LOCAL_MODULE := libadbd
LOCAL_CFLAGS := $(LIBADB_CFLAGS) -DADB_HOST=0
LOCAL_SRC_FILES := \
    $(LIBADB_SRC_FILES) \
    adb_auth_client.cpp \
    fdevent.cpp \
    jdwp_service.cpp \
    qemu_tracing.cpp \
    usb_linux_client.cpp \

LOCAL_SHARED_LIBRARIES := libbase

include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/adb/Android.mk 
 LOCAL_MODULE := libadb
LOCAL_CFLAGS := $(LIBADB_CFLAGS) -DADB_HOST=1
LOCAL_SRC_FILES := \
    $(LIBADB_SRC_FILES) \
    $(LIBADB_$(HOST_OS)_SRC_FILES) \
    adb_auth_host.cpp \

LOCAL_SHARED_LIBRARIES := libbase

# Even though we're building a static library (and thus there's no link step for
# this to take effect), this adds the SSL includes to our path.
LOCAL_STATIC_LIBRARIES := libcrypto_static

ifeq ($(HOST_OS),windows)
    LOCAL_C_INCLUDES += development/host/windows/usb/api/
endif

include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libcutils/Android.mk 
 LOCAL_MODULE := libcutils
LOCAL_SRC_FILES := $(commonSources) $(commonHostSources) dlmalloc_stubs.c
LOCAL_STATIC_LIBRARIES := liblog
ifneq ($(HOST_OS),windows)
LOCAL_CFLAGS += -Werror
endif
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libcutils/Android.mk 
 LOCAL_MODULE := libcutils
LOCAL_SRC_FILES := $(commonSources) \
        android_reboot.c \
        ashmem-dev.c \
        debugger.c \
        klog.c \
        partition_utils.c \
        properties.c \
        qtaguid.c \
        trace-dev.c \
        uevent.c \

# arch-arm/memset32.S does not compile with Clang.
LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as

LOCAL_SRC_FILES_arm += arch-arm/memset32.S
LOCAL_SRC_FILES_arm64 += arch-arm64/android_memset.S

LOCAL_SRC_FILES_mips += arch-mips/android_memset.c
LOCAL_SRC_FILES_mips64 += arch-mips/android_memset.c

LOCAL_SRC_FILES_x86 += \
        arch-x86/android_memset16.S \
        arch-x86/android_memset32.S \

LOCAL_SRC_FILES_x86_64 += \
        arch-x86_64/android_memset16.S \
        arch-x86_64/android_memset32.S \

LOCAL_C_INCLUDES := $(libcutils_c_includes)
LOCAL_STATIC_LIBRARIES := liblog
ifneq ($(ENABLE_CPUSETS),)
LOCAL_CFLAGS += -DUSE_CPUSETS
endif
LOCAL_CFLAGS += -Werror -std=gnu90
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/base/Android.mk 
 LOCAL_MODULE := libbase
LOCAL_CLANG := true
LOCAL_SRC_FILES := $(libbase_src_files) logging.cpp
LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_CPPFLAGS := $(libbase_cppflags)
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
LOCAL_STATIC_LIBRARIES := libcutils
LOCAL_MULTILIB := both
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/base/Android.mk 
 LOCAL_MODULE := libbase
LOCAL_SRC_FILES := $(libbase_src_files)
ifneq ($(HOST_OS),windows)
    LOCAL_SRC_FILES += logging.cpp
endif
LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_CPPFLAGS := $(libbase_cppflags)
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
LOCAL_STATIC_LIBRARIES := libcutils
LOCAL_MULTILIB := both
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libmincrypt/Android.mk 
 LOCAL_MODULE := libmincrypt
LOCAL_SRC_FILES := dsa_sig.c p256.c p256_ec.c p256_ecdsa.c rsa.c sha.c sha256.c
LOCAL_CFLAGS := -Wall -Werror
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/libmincrypt/Android.mk 
 LOCAL_MODULE := libmincrypt
LOCAL_SRC_FILES := dsa_sig.c p256.c p256_ec.c p256_ecdsa.c rsa.c sha.c sha256.c
LOCAL_CFLAGS := -Wall -Werror
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/core/logwrapper/Android.mk 
 LOCAL_MODULE := liblogwrap
LOCAL_SRC_FILES := logwrap.c
LOCAL_SHARED_LIBRARIES := libcutils liblog
LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_CFLAGS := -Werror
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/ext4_utils/Android.mk 
 LOCAL_MODULE := libext4_utils_host
LOCAL_STATIC_LIBRARIES := \
    libsparse_host \
    libz
ifneq ($(HOST_OS),windows)
  LOCAL_STATIC_LIBRARIES += libselinux
endif
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/ext4_utils/Android.mk 
 LOCAL_MODULE := libext4_utils_static
LOCAL_STATIC_LIBRARIES := \
    libsparse_static
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/f2fs_utils/Android.mk 
 LOCAL_MODULE := libf2fs_utils_host
LOCAL_SRC_FILES := f2fs_utils.c
LOCAL_STATIC_LIBRARIES := \
    libsparse_host \
    libz
LOCAL_C_INCLUDES := external/f2fs-tools/include external/f2fs-tools/mkfs
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/f2fs_utils/Android.mk 
 LOCAL_MODULE := libf2fs_ioutils_host
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/f2fs_utils/Android.mk 
 LOCAL_MODULE := libf2fs_dlutils_host
include $(BUILD_HOST__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/f2fs_utils/Android.mk 
 LOCAL_MODULE := libf2fs_dlutils_static
LOCAL_SRC_FILES := f2fs_dlutils.c
LOCAL_C_INCLUDES := external/f2fs-tools/include external/f2fs-tools/mkfs
LOCAL_SHARED_LIBRARIES := libdl
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/f2fs_utils/Android.mk 
 LOCAL_MODULE := libf2fs_utils_static
LOCAL_SRC_FILES := f2fs_utils.c
LOCAL_C_INCLUDES := external/f2fs-tools/include external/f2fs-tools/mkfs
LOCAL_STATIC_LIBRARIES := \
    libsparse_static
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/perfprofd/tests/Android.mk 
 LOCAL_MODULE := libperfprofdmockutils
LOCAL_CPPFLAGS += $(perfprofd_test_cppflags)
LOCAL_SRC_FILES := perfprofdmockutils.cc
include $(BUILD__STATIC_LIBRARY




/media/frank/jam/linaro/aosp-M/system/extras/squashfs_utils/Android.mk 
 LOCAL_MODULE := libsquashfs_utils
include $(BUILD__STATIC_LIBRARY




